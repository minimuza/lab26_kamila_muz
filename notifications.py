import logging
import json
import time
from fastapi import FastAPI, WebSocket, WebSocketDisconnect, Request
from fastapi.responses import JSONResponse
from typing import List
import asyncio

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s: %(message)s")

app = FastAPI()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö WebSocket-–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
clients: List[WebSocket] = []


# --- –®–∞–≥ 3: –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è) ---
async def broadcast(message: str):
    """–†–∞—Å—Å—ã–ª–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º, –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è."""
    logging.info(f"‚ö° BROADCAST: –†–∞—Å—Å—ã–ª–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {message}")

    # –°–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã—Ö –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ —Ä–∞—Å—Å—ã–ª–∫–∏
    disconnected_clients = []

    for client in clients:
        try:
            # –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
            await client.send_text(message)
        except (WebSocketDisconnect, RuntimeError) as e:
            # –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∫–ª–∏–µ–Ω—Ç –∑–∞–∫—Ä—ã–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ), –ø–æ–º–µ—á–∞–µ–º –µ–≥–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
            logging.warning(
                f"‚ö†Ô∏è –ö–ª–∏–µ–Ω—Ç {client.client.host if client.client else 'Unknown'} –æ—Ç–∫–ª—é—á–∏–ª—Å—è –≤–æ –≤—Ä–µ–º—è —Ä–∞—Å—Å—ã–ª–∫–∏: {e.__class__.__name__}")
            disconnected_clients.append(client)
        except Exception as e:
            logging.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–ª–∏–µ–Ω—Ç—É: {e}")
            disconnected_clients.append(client)

    # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –æ—Ç–∫–ª—é—á–∏–≤—à–∏—Ö—Å—è –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
    for client in disconnected_clients:
        try:
            clients.remove(client)
            logging.info(f"üî¥ –£–¥–∞–ª–µ–Ω –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∏–µ–Ω—Ç. –û—Å—Ç–∞–ª–æ—Å—å: {len(clients)}")
        except ValueError:
            pass  # –ö–ª–∏–µ–Ω—Ç —É–∂–µ –±—ã–ª —É–¥–∞–ª–µ–Ω –¥—Ä—É–≥–∏–º –ø–æ—Ç–æ–∫–æ–º


# --- –®–∞–≥ 2: WebSocket –†–æ—É—Ç ---
@app.websocket("/ws")
async def websocket_endpoint(websocket: WebSocket):
    # –ü—Ä–∏–Ω—è—Ç–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    await websocket.accept()
    clients.append(websocket)

    client_host = websocket.client.host if websocket.client else "Unknown"
    logging.info(f"üü¢ [WS CONNECT] –ö–ª–∏–µ–Ω—Ç {client_host} –ø–æ–¥–∫–ª—é—á–µ–Ω. –í—Å–µ–≥–æ: {len(clients)}")

    try:
        # –¶–∏–∫–ª –¥–ª—è –ø—Ä–∏–µ–º–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ (–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∫–æ–¥ –õ–†)
        while True:
            # receive_text() - –∂–¥–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
            data = await websocket.receive_text()
            # –≠—Ö–æ-—Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é, —á—Ç–æ–±—ã —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –∫–∞–Ω–∞–ª —Ä–∞–±–æ—Ç–∞–µ—Ç
            await websocket.send_text(f"–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏: {data}")

    except WebSocketDisconnect:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è, –∫–æ–≥–¥–∞ –∫–ª–∏–µ–Ω—Ç –∑–∞–∫—Ä—ã–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        clients.remove(websocket)
        logging.info(f"üî¥ [WS DISCONNECT] –ö–ª–∏–µ–Ω—Ç {client_host} –æ—Ç–∫–ª—é—á–µ–Ω. –û—Å—Ç–∞–ª–æ—Å—å: {len(clients)}")
    except Exception as e:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫
        logging.error(f"–û—à–∏–±–∫–∞ –≤ WebSocket-—Ü–∏–∫–ª–µ –¥–ª—è {client_host}: {e}")
        try:
            clients.remove(websocket)
        except ValueError:
            pass  # –£–∂–µ —É–¥–∞–ª–µ–Ω


# --- –®–∞–≥ 4: –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (HTTP POST) ---
@app.post("/notify")
async def send_notification(request: Request):
    try:
        data = await request.json()
        message = data.get('message', '–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è')

        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É
        await broadcast(f"üöÄ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {message}")

        return JSONResponse(
            status_code=200,
            content={"status": "ok", "message_sent": message, "recipients": len(clients)}
        )
    except json.JSONDecodeError:
        return JSONResponse(status_code=400, content={"status": "error", "detail": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JSON"})
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ /notify: {e}")
        return JSONResponse(status_code=500, content={"status": "error", "detail": "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"})
