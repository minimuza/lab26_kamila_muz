import redis
import time
from fastapi import FastAPI, HTTPException
from fastapi.responses import JSONResponse
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s: %(message)s")

app = FastAPI(
    title="Redis Caching Example",
    description="–ü—Ä–∏–º–µ—Ä –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ API –Ω–∞ 10 —Å–µ–∫—É–Ω–¥ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Redis."
)

# 3. –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis
# –ò—Å–ø–æ–ª—å–∑—É–µ–º localhost:6379 (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–æ—Ä—Ç Redis)
try:
    r = redis.Redis(host="localhost", port=6379, db=0)
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: –≤—ã–ø–æ–ª–Ω–∏–º ping
    r.ping()
    logging.info("‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis.")
except redis.exceptions.ConnectionError as e:
    # –ï—Å–ª–∏ Redis –Ω–µ –∑–∞–ø—É—â–µ–Ω, –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤—ã–¥–∞—Å—Ç –æ—à–∏–±–∫—É
    logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ redis-server –∑–∞–ø—É—â–µ–Ω: {e}")
    # –ú–æ–∂–Ω–æ –ø–æ–¥–Ω—è—Ç—å HTTPException –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ –∫–µ—à–∞, –Ω–æ –¥–ª—è –õ–† –ª—É—á—à–µ –≤—ã–π—Ç–∏
    raise HTTPException(status_code=503, detail="Redis service is unavailable")


# 4. –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
@app.get("/data")
def get_data():
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ª–∏–±–æ –∏–∑ –∫–µ—à–∞ Redis (–µ—Å–ª–∏ TTL –Ω–µ –∏—Å—Ç–µ–∫),
    –ª–∏–±–æ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Ö –≤ –∫–µ—à –Ω–∞ 10 —Å–µ–∫—É–Ω–¥.
    """

    CACHE_KEY = "my_data"
    CACHE_TTL_SECONDS = 10  # Time To Live (–≤—Ä–µ–º—è –∂–∏–∑–Ω–∏) –∫–µ—à–∞

    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à (r.get –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –±–∞–π—Ç—ã –∏–ª–∏ None)
    if (cached_data_bytes := r.get(CACHE_KEY)):
        # –î–∞–Ω–Ω—ã–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –∫–µ—à–µ. –î–µ–∫–æ–¥–∏—Ä—É–µ–º –∏—Ö –∏–∑ –±–∞–π—Ç–æ–≤ –≤ —Å—Ç—Ä–æ–∫—É
        data = cached_data_bytes.decode("utf-8")
        logging.info("‚û°Ô∏è –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã –∏–∑ –∫–µ—à–∞.")
        return JSONResponse(content={"data": data, "cached": True})

    # 2. –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –≤ –∫–µ—à–µ ‚Äî –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º "—Ç—è–∂–µ–ª—ã–π" —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    logging.info("üîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–º–µ–¥–ª–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å).")
    # –ò–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –≤ 1 —Å–µ–∫—É–Ω–¥—É, –∫–∞–∫ –±—É–¥—Ç–æ —ç—Ç–æ –¥–æ–ª–≥–∏–π –∑–∞–ø—Ä–æ—Å –∫ –ë–î
    time.sleep(1)
    result = f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –≤: {time.time()}"

    # 3. –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∫–µ—à —Å TTL (Time To Live)
    # setex —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–ª—é—á –∏ –≤—Ä–µ–º—è –∂–∏–∑–Ω–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    r.setex(CACHE_KEY, CACHE_TTL_SECONDS, result)

    return JSONResponse(content={"data": result, "cached": False})
