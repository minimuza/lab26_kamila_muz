import time
from fastapi import FastAPI, HTTPException
import redis
import logging

logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s: %(message)s")

app = FastAPI(title="Profiling Example - AFTER Optimization (Redis)")

# --- 1. –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis (–ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ) ---
try:
    r = redis.Redis(host="localhost", port=6379, db=0)
    r.ping()
    logging.info("‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis. –ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ.")
    REDIS_CONNECTED = True
except redis.exceptions.ConnectionError:
    logging.warning("‚ùå Redis Server –Ω–µ –∑–∞–ø—É—â–µ–Ω. –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º –æ—Ç–∫–ª—é—á–µ–Ω–∞.")
    REDIS_CONNECTED = False

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –∫–µ—à–∞
CACHE_KEY = "heavy_sum_result"
CACHE_TTL_SECONDS = 300  # –ö–µ—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞ 5 –º–∏–Ω—É—Ç


@app.get("/optimized-endpoint")
def optimized_endpoint():
    """
    –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ Redis,
    —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç—è–∂–µ–ª–æ–π CPU-–æ–ø–µ—Ä–∞—Ü–∏–∏.
    """
    start = time.time()

    # --- 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ö–µ—à ---
    if REDIS_CONNECTED:
        if (cached_data_bytes := r.get(CACHE_KEY)):
            duration = time.time() - start
            result_sum = int(cached_data_bytes.decode("utf-8"))
            logging.info(f"‚û°Ô∏è –í—ã–∑–æ–≤: –ó–∞–Ω—è–ª–æ {duration:.4f} —Å–µ–∫. (–ö–ï–® –•–ò–¢)")
            return {
                "result": "Calculation completed (CACHED)",
                "sum": result_sum,
                "duration_seconds": f"{duration:.4f}",
                "status": "OPTIMIZED (Redis)"
            }

    # --- 3. –¢—è–∂–µ–ª–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è (–ö–µ—à –ú–∏—Å—Å) ---
    logging.info("üîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–º–µ–¥–ª–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å).")

    # –í—ã–ø–æ–ª–Ω—è–µ–º —Ç—É –∂–µ —Ç—è–∂–µ–ª—É—é –æ–ø–µ—Ä–∞—Ü–∏—é
    # NOTE: –≠—Ç–æ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ –∑–∞ 5 –º–∏–Ω—É—Ç!
    result_sum = sum([i ** 2 for i in range(10_000_000)])

    # --- 4. –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –ö–µ—à ---
    if REDIS_CONNECTED:
        r.setex(CACHE_KEY, CACHE_TTL_SECONDS, result_sum)
        logging.info("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –∫–µ—à.")

    duration = time.time() - start

    return {
        "result": "Calculation completed (RECALCULATED)",
        "sum": result_sum,
        "duration_seconds": f"{duration:.4f}",
        "status": "OPTIMIZED (Recalculated)"
    }

